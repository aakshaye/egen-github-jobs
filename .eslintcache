[{"/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/Landing.js":"1","/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/JobTile.js":"2","/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/Header.js":"3","/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/Toggle.js":"4","/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/SearchForm.js":"5","/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/JobListing.js":"6","/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/reportWebVitals.js":"7","/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/JobDetail.js":"8"},{"size":7370,"mtime":1606971615033,"results":"9","hashOfConfig":"10"},{"size":977,"mtime":1606890338344,"results":"11","hashOfConfig":"10"},{"size":368,"mtime":1606933233080,"results":"12","hashOfConfig":"10"},{"size":522,"mtime":1606933186952,"results":"13","hashOfConfig":"10"},{"size":1374,"mtime":1606967474830,"results":"14","hashOfConfig":"10"},{"size":2154,"mtime":1606971367583,"results":"15","hashOfConfig":"10"},{"size":362,"mtime":1606772874497,"results":"16","hashOfConfig":"10"},{"size":2474,"mtime":1606970713180,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1gp5kf4",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/Landing.js",["36","37"],"import './Landing.css';\nimport React from 'react';\nimport Header from './components/Header';\nimport JobListing from './components/JobListing';\nimport SearchForm from './components/SearchForm';\nimport JobDetail from './components/JobDetail';\n\nclass Landing extends React.Component {\n    constructor() {\n        super();\n        this.state = {            \n            query: 'page=1',                 // get Page 0 of jobs by default\n            page: 1,\n            titleSkillText: \"\",              // lifted up from SearchForm\n            locationText: \"\",                // lifted up from SearchForm\n            fullTimeOnly: \"\",                // lifted up from SearchForm\n            showJobDetails : false,          \n            jobID: \"\",                       // lifted up from JobDetails\n            currentJob: \"\",                  // lifted up from JobDetails\n            darkMode: false,\n            /*lat: \"\", \n            long: \"\"*/                       // uncommenting this will use lat and long in search (API isn't very accurate)\n        };\n        this.handleChange = this.handleChange.bind(this); \n        this.handleSubmit = this.handleSubmit.bind(this); \n        this.handleJobClick = this.handleJobClick.bind(this);\n        this.handleDarkModeToggle = this.handleDarkModeToggle.bind(this);\n        this.setLocation = this.setLocation.bind(this);\n    }\n    \n    // lifted up from SearchForm\n    handleChange(event) {\n        const { name, value, checked } = event.target;\n        if (name !== 'fullTimeOnly') {\n            this.setState({\n                [name]: value\n            });\n        } else {\n            this.setState({\n                fullTimeOnly: checked\n            });\n        }\n    }\n    // lifted up from SearchForm\n    handleSubmit(event) {\n        event.preventDefault();\n        this.buildQueryString();\n    }\n    buildQueryString() {\n        // Get query parameters\n        const locationQuery = this.state.locationText;\n        const titleSkillQuery = this.state.titleSkillText;\n        const fullTimeQuery = this.state.fullTimeOnly;\n        const pageNum = this.state.page;\n        \n        // Assign params to object\n        const queryObj = {}\n        queryObj.location = locationQuery !== \"\" ? locationQuery : \"\";\n        queryObj.description = titleSkillQuery !== \"\" ? titleSkillQuery : \"\";\n        queryObj.full_time = fullTimeQuery !== \"\" ? fullTimeQuery : \"\";\n        queryObj.page = pageNum === 0 ? 0 : pageNum; \n        \n        // uncommenting this will use lat and long in search\n        // COMMENTED BECAUSE API NOT VERY ACCURATE\n        /*queryObj.lat = lat !== \"\" ? lat : \"\";\n        queryObj.long = lat !== \"\" ? long : \"\";*/\n\n        const queryString = this.getQueryString(queryObj);\n\n        queryString !== \"\" && this.setState({\n            query: queryString\n        })\n    }\n    getLocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.setLocation);\n        } else { \n            console.error(\"Geolocation is not supported by this browser.\");\n        }\n    } \n    setLocation(position) {\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;        \n        // uncommenting this will use lat and long in search\n        // COMMENTED BECAUSE API NOT VERY ACCURATE\n        /*this.setState({\n            locationText: latitude + \",\" + longitude,\n            \n            lat: latitude, \n            long: longitude\n        });*/\n    }\n    handleJobClick(event) {\n        event.stopPropagation();\n        const clickedJobID = event.target.id;\n        // CORS workaround in API call\n        const fetchURL = `https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions/${clickedJobID}.json?markdown=true`; // template string\n        \n        fetch(fetchURL)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    const job = result;\n                    this.setState({\n                        currentJob:job,\n                        showJobDetails: true\n                    });\n                },\n            )\n            .catch(\n                (error) => {\n                    this.setState({\n                        error\n                    });\n                }      \n            )\n    }\n    handleDarkModeToggle(event) {\n        const {checked} = event.target;\n        this.setState({\n            darkMode: checked\n        });\n    }\n    componentDidMount() {\n        this.getLocation();\n        document.addEventListener('scroll', this.trackScrolling);\n    }\n    componentDidUpdate() {\n        document.addEventListener('scroll', this.trackScrolling);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('scroll', this.trackScrolling);\n    }\n    isBottom(ele) {\n        return ele.getBoundingClientRect().bottom <= window.innerHeight; // reached bottom of page\n    }\n    trackScrolling = () => {\n        const wrappedElement = document.getElementById('Landing');\n        if (this.isBottom(wrappedElement)) {     \n            document.removeEventListener('scroll', this.trackScrolling);\n            const pageNum = this.state.page;\n            this.setState({\n                page: pageNum+1\n            });\n            this.buildQueryString()\n        }\n      };\n    /* This function takes query parameter object and creates an appropriate query string */\n    getQueryString(obj) {\n        const queryParams = [];\n        for (const key in obj) {\n            if (obj[key] !== \"\") {\n                queryParams.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key])); // encode URL to make sure special characters are parsed\n            }\n        }\n        return queryParams.join('&');\n    }\n    render() {\n        const currentJob = this.state.currentJob;\n        return (\n            <div id=\"Landing\" className=\"Landing\">    \n                <header className=\"App-header purple\">\n                    <Header \n                        handleDarkModeToggle={this.handleDarkModeToggle}\n                    />\n                </header>\n                {!this.state.showJobDetails && \n                    <div>\n                        <SearchForm\n                            locationText={this.state.locationText}\n                            handleChange={this.handleChange}\n                            handleSubmit={this.handleSubmit}\n                        />\n                        <JobListing \n                            query = {this.state.query}\n                            handleJobClick={this.handleJobClick}\n                        />\n                    </div>    \n                }\n                {this.state.showJobDetails && \n                    <JobDetail                    \n                        companyName={currentJob.company}\n                        companyLogo={currentJob.company_logo}\n                        location={currentJob.location}\n                        position={currentJob.title}\n                        type={currentJob.type}\n                        createdTime={currentJob.created_at}\n                        description={currentJob.description}\n                        companyURL={currentJob.company_url}\n                        howToApply={currentJob.how_to_apply}\n                    />\n                }\n            </div>\n        );\n    }\n}\nexport default Landing;\n","/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/JobTile.js",[],"/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/Header.js",[],"/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/Toggle.js",[],"/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/SearchForm.js",[],["38","39"],"/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/JobListing.js",[],"/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/reportWebVitals.js",[],"/home/aakshaye/Documents/Egen/egen-project/egen-github-jobs/src/components/JobDetail.js",[],{"ruleId":"40","severity":1,"message":"41","line":82,"column":15,"nodeType":"42","messageId":"43","endLine":82,"endColumn":23},{"ruleId":"40","severity":1,"message":"44","line":83,"column":15,"nodeType":"42","messageId":"43","endLine":83,"endColumn":24},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},"no-unused-vars","'latitude' is assigned a value but never used.","Identifier","unusedVar","'longitude' is assigned a value but never used.","no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-global-assign","no-unsafe-negation"]